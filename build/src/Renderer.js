import"./Line.js";import"./Particle.js";import r from"./Vector2.js";export default class c{constructor(i,s="#000",t=new r(300,150)){this.particles=[],this.lines=[],this.deltas,this.gradient,this._ctx=i,this._debug,this._viewportSize=t,this._transparentBackground=!1,this._backgroundColor=s,this._ctx.lineWidth=1}set viewportSize(i){this._viewportSize=i}render(){this._transparentBackground?this._ctx.clearRect():this.gradient?(this._ctx.fillStyle=this.gradient,this._ctx.fillRect(0,0,this._viewportSize.x,this._viewportSize.y)):(this._ctx.fillStyle=this._backgroundColor,this._ctx.fillRect(0,0,this._viewportSize.x,this._viewportSize.y));const i=this.particles.filter(t=>Boolean(t.letter)),s=this.particles.filter(t=>!Boolean(t.letter));this._ctx.fillStyle="rgba(255,255,255,0.7)",this._ctx.font="30px monospace";for(const t of i)this._ctx.fillText(t.letter,t.position.x-8,t.position.y+10);this._ctx.fillStyle="rgba(255,255,255,0.5)",this._ctx.beginPath();for(const t of s)this._ctx.moveTo(t.position.x,t.position.y),this._ctx.arc(t.position.x,t.position.y,t.radius,0,Math.PI*2);this._ctx.fill();for(const t of this.lines)this._ctx.beginPath(),this._ctx.strokeStyle=`rgba(255,255,255,${t.alpha})`,this._ctx.moveTo(t.a.x,t.a.y),this._ctx.lineTo(t.b.x,t.b.y),this._ctx.stroke();this._debug&&this.drawPerformanceGraphic()}drawCircle(i,s,t,o,e){i.fillStyle=e,i.beginPath(),i.arc(s,t,o,0,Math.PI*2),i.fill()}drawPerformanceGraphic(){const i=this.deltas.filter(l=>Boolean(l)),s=Math.min(...i),t=Math.max(...i);this._ctx.font="16px monospace",this._ctx.strokeStyle="#fff",this._ctx.beginPath();let o=0;const e=70;this._ctx.moveTo(o,e-this.deltas[0]);for(const l of this.deltas){const h=e-l/t*50;this._ctx.lineTo(o,h),o++}this._ctx.moveTo(0,e),this._ctx.lineTo(this.deltas.length,e),this._ctx.fillText("0",this.deltas.length,e+4),this._ctx.moveTo(0,e-50),this._ctx.lineTo(this.deltas.length,e-50),this._ctx.fillText(t,this.deltas.length,e-50+4),this._ctx.closePath(),this._ctx.stroke(),this._ctx.fillStyle="#fff",this._ctx.fillText(`${this.deltas[this.deltas.length-1]?.toString()} ms (${s}-${t})`,100,15),this._ctx.fillText(`${this.particles.length.toString()} part`,0,15)}}
