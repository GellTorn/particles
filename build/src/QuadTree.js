import o from"./Rectangle.js";export default class h{constructor(t,n){this.rectangle=t,this.capacity=n,this.points=[],this.divided=!1,this.northEast,this.northWest,this.southEast,this.southWest}subdivide(){const t=this.rectangle.position.x,n=this.rectangle.position.y,s=this.rectangle.size.x,e=this.rectangle.size.y,i=this.capacity;this.northEast=new h(new o(t,n,s/2,e/2),i),this.northWest=new h(new o(t+s/2,n,s/2,e/2),i),this.southEast=new h(new o(t,n+e/2,s/2,e/2),i),this.southWest=new h(new o(t+s/2,n+e/2,s/2,e/2),i),this.divided=!0}insert(t){return this.rectangle.contains(t.position)?this.points.length<this.capacity?(this.points.push(t),!0):(this.divided||this.subdivide(),(this.northEast.insert(t)||this.northWest.insert(t)||this.southEast.insert(t)||this.southWest.insert(t))??!1):!1}queryCircle(t){const n=[],s=[];s.push(this);for(let e=0;e<s.length;e++){const i=s[e];if(i.rectangle.intersectsCircle(t)){for(const r of i.points)t.intersectsPoint(r.position)&&n.push(r);i.divided&&(s.push(i.northEast),s.push(i.northWest),s.push(i.southEast),s.push(i.southWest))}}return n}}
