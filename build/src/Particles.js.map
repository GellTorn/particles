{
  "version": 3,
  "sources": ["../../build/src/Vector2.js", "../../build/src/Circle.js", "../../build/src/Line.js", "../../build/src/Particle.js", "../../build/src/Rectangle.js", "../../build/src/Renderer.js", "../../build/src/QuadTree.js", "../../build/src/Random.js", "../../build/src/Grid.js", "../../build/src/Particles.js"],
  "sourcesContent": ["export default class Vector2 {\r\n  constructor(x = 0, y = 0) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n  /** Create Vector form another Vector */\r\n  static fromVector(vector) {\r\n    return new Vector2(vector.x, vector.y)\r\n  }\r\n  /** Create Vector form array */\r\n  static fromArray(array) {\r\n    return new Vector2(array[0], array[1])\r\n  }\r\n  /** Set the `x` and `y` components of the this Vector to the given `x` and `y` values. */\r\n  set(x, y = x) {\r\n    this.x = x\r\n    this.y = y\r\n    return this\r\n  }\r\n  /** Sets the `x` and `y` values of this object from a given polar coordinate. */\r\n  setToPolar(azimuth, radius = 1) {\r\n    this.x = Math.cos(azimuth) * radius\r\n    this.y = Math.sin(azimuth) * radius\r\n    return this\r\n  }\r\n  /** Check whether this Vector is equal to a given Vector. */\r\n  equals(v) {\r\n    return this.x === v.x && this.y === v.y\r\n  }\r\n  /** Calculate the angle between this Vector and the positive x-axis, in radians. */\r\n  angle() {\r\n    let angle = Math.atan2(this.y, this.x)\r\n    if (angle < 0) {\r\n      angle += 2 * Math.PI\r\n    }\r\n    return angle\r\n  }\r\n  /** Set the angle of this Vector. */\r\n  setAngle(angle) {\r\n    return this.setToPolar(angle, this.length())\r\n  }\r\n  /** Add a given Vector to this Vector. Addition is component-wise. */\r\n  add(src) {\r\n    this.x += src.x\r\n    this.y += src.y\r\n    return this\r\n  }\r\n  /** Subtract the given Vector from this Vector. Subtraction is component-wise. */\r\n  subtract(src) {\r\n    this.x -= src.x\r\n    this.y -= src.y\r\n    return this\r\n  }\r\n  /** Multiplies this Vector by the given Vector. */\r\n  multiply(src) {\r\n    this.x *= src.x\r\n    this.y *= src.y\r\n    return this\r\n  }\r\n  /** Divides this Vector by the given Vector. */\r\n  divide(src) {\r\n    this.x /= src.x\r\n    this.y /= src.y\r\n    return this\r\n  }\r\n  /** Scale this Vector by the given value. */\r\n  scale(value) {\r\n    if (isFinite(value)) {\r\n      this.x *= value\r\n      this.y *= value\r\n    } else {\r\n      this.x = 0\r\n      this.y = 0\r\n    }\r\n    return this\r\n  }\r\n  /** Negate the `x` and `y` components of this Vector. */\r\n  negate() {\r\n    this.x = -this.x\r\n    this.y = -this.y\r\n    return this\r\n  }\r\n  /** Calculate the distance between this Vector and the given Vector. */\r\n  distance(src) {\r\n    const dx = src.x - this.x\r\n    const dy = src.y - this.y\r\n\r\n    return Math.sqrt(dx * dx + dy * dy)\r\n  }\r\n  /** Calculate the distance between this Vector and the given Vector, squared. */\r\n  distanceSq(src) {\r\n    const dx = src.x - this.x\r\n    const dy = src.y - this.y\r\n\r\n    return dx * dx + dy * dy\r\n  }\r\n  /** Calculate the length (or magnitude) of this Vector. */\r\n  length() {\r\n    const x = this.x\r\n    const y = this.y\r\n\r\n    return Math.sqrt(x * x + y * y)\r\n  }\r\n  /** Set the length (or magnitude) of this Vector. */\r\n  setLength(length) {\r\n    return this.normalize().scale(length)\r\n  }\r\n  /** Calculate the length of this Vector squared. */\r\n  lengthSq() {\r\n    const x = this.x\r\n    const y = this.y\r\n\r\n    return x * x + y * y\r\n  }\r\n  /** Makes the vector a unit length vector (magnitude of 1) in the same direction. */\r\n  normalize() {\r\n    const x = this.x\r\n    const y = this.y\r\n    let len = x * x + y * y\r\n\r\n    if (len > 0) {\r\n      len = 1 / Math.sqrt(len)\r\n\r\n      this.x = x * len\r\n      this.y = y * len\r\n    }\r\n\r\n    return this\r\n  }\r\n  /** Rotate this Vector to its perpendicular, in the positive direction. */\r\n  normalizeRightHand() {\r\n    const x = this.x\r\n\r\n    this.x = this.y * -1\r\n    this.y = x\r\n\r\n    return this\r\n  }\r\n  /** Rotate this Vector to its perpendicular, in the negative direction. */\r\n  normalizeLeftHand() {\r\n    const x = this.x\r\n\r\n    this.x = this.y\r\n    this.y = x * -1\r\n\r\n    return this\r\n  }\r\n  /** Calculate the dot product of this Vector and the given Vector. */\r\n  dot(src) {\r\n    return this.x * src.x + this.y * src.y\r\n  }\r\n  /** Calculate the cross product of this Vector and the given Vector. */\r\n  cross(src) {\r\n    return this.x * src.y - this.y * src.x\r\n  }\r\n  /**Linearly interpolate between this Vector and the given Vector.\r\n   *\r\n   * Interpolates this Vector towards the given Vector.\r\n   * The interpolation percentage, between 0 and 1.\r\n   */\r\n  lerp(src, t = 0) {\r\n    const ax = this.x\r\n    const ay = this.y\r\n\r\n    this.x = ax + t * (src.x - ax)\r\n    this.y = ay + t * (src.y - ay)\r\n\r\n    return this\r\n  }\r\n  /** Make this Vector the zero vector (0, 0). */\r\n  reset() {\r\n    this.x = 0\r\n    this.y = 0\r\n\r\n    return this\r\n  }\r\n  /** Limit the length (or magnitude) of this Vector. */\r\n  limit(max) {\r\n    const len = this.length()\r\n\r\n    if (len && len > max) {\r\n      this.scale(max / len)\r\n    }\r\n\r\n    return this\r\n  }\r\n  /** Reflect this Vector off a line defined by a normal. */\r\n  reflect(normal) {\r\n    normal = Vector2.fromVector(normal).normalize()\r\n\r\n    return this.subtract(normal.scale(2 * this.dot(normal)))\r\n  }\r\n  /** Reflect this Vector across another. */\r\n  mirror(axis) {\r\n    return this.reflect(axis).negate()\r\n  }\r\n  /** Rotate this Vector by an angle amount.\r\n   *\r\n   * The angle to rotate by, in radians.\r\n   */\r\n  rotate(delta) {\r\n    const cos = Math.cos(delta)\r\n    const sin = Math.sin(delta)\r\n\r\n    return this.set(cos * this.x - sin * this.y, sin * this.x + cos * this.y)\r\n  }\r\n\r\n  toPolar() {\r\n    return {\r\n      p: Math.sqrt(this.x * this.x + this.y * this.y),\r\n      q: Math.atan2(this.y, this.x),\r\n    }\r\n  }\r\n}\r\n", "import Vector2 from \"./Vector2.js\"\r\n\r\nexport default class Circle {\r\n  constructor(x = 0, y = 0, radius = 0) {\r\n    this.position = new Vector2(x, y)\r\n\r\n    this.radius = radius\r\n  }\r\n\r\n  get center() {\r\n    return this.position\r\n  }\r\n\r\n  set center(value) {\r\n    this.position = value\r\n  }\r\n\r\n  get diameter() {\r\n    return this.radius * 2\r\n  }\r\n\r\n  set diameter(value) {\r\n    this.radius = value * 0.5\r\n  }\r\n\r\n  get left() {\r\n    return this.position.x - this.radius\r\n  }\r\n\r\n  set left(value) {\r\n    this.position.x = value + this.radius\r\n  }\r\n\r\n  get right() {\r\n    return this.position.x + this.radius\r\n  }\r\n\r\n  set right(value) {\r\n    this.position.x = value - this.radius\r\n  }\r\n\r\n  get top() {\r\n    return this.position.y + this.radius\r\n  }\r\n\r\n  set top(value) {\r\n    this.position.y = value - this.radius\r\n  }\r\n\r\n  get bottom() {\r\n    return this.position.y - this.radius\r\n  }\r\n\r\n  set bottom(value) {\r\n    this.position.y = value + this.radius\r\n  }\r\n\r\n  intersectsPoint(point) {\r\n    return (point.distance(this.position) <= this.radius)\r\n  }\r\n}", "import Vector2 from \"./Vector2.js\"\r\n\r\nexport default class Line {\r\n\tconstructor(a = new Vector2(), b = new Vector2()) {\r\n\t\tthis.a = a\r\n\t\tthis.b = b\r\n\t}\r\n\r\n\tlength() {\r\n\t\treturn Math.sqrt((this.b.x - this.a.x) * (this.b.x - this.a.x) + (this.b.y - this.a.y) * (this.b.y - this.a.y))\r\n\t}\r\n}", "import Vector2 from \"./Vector2.js\"\r\n\r\nexport class Particle {\r\n  constructor() {\r\n    this.position = new Vector2()\r\n\r\n    this.velocity = new Vector2()\r\n\r\n    this.active = true\r\n\r\n    this.radius = 1\r\n  }\r\n\r\n  update() {\r\n    this.position.add(this.velocity)\r\n  }\r\n}\r\n\r\nexport class ParticleManager {\r\n  constructor() {\r\n    this.particles = []\r\n  }\r\n\r\n  createParticle() {\r\n    const newParticle = new Particle()\r\n    this.particles.push(newParticle)\r\n    return newParticle\r\n  }\r\n}\r\n", "import Vector2 from \"./Vector2.js\"\r\n\r\nexport default class Rectangle {\r\n\tconstructor(x = 0, y = 0, width = 0, height = 0) {\r\n\t\tthis.position = new Vector2(x, y)\r\n\r\n\t\tthis.size = new Vector2(width, height)\r\n\t}\r\n\r\n\tget left() {\r\n\t\treturn this.position.x\r\n\t}\r\n\r\n\tset left(value) {\r\n\t\tif (value >= this.right) {\r\n\t\t\tthis.size.x = 0\r\n\t\t} else {\r\n\t\t\tthis.size.x = this.right - value\r\n\t\t}\r\n\r\n\t\tthis.position.x = value\r\n\t}\r\n\r\n\tget right() {\r\n\t\treturn this.position.x + this.size.x\r\n\t}\r\n\r\n\tset right(value) {\r\n\t\tif (value <= this.position.x) {\r\n\t\t\tthis.size.x = 0\r\n\t\t} else {\r\n\t\t\tthis.size.x = value - this.position.x\r\n\t\t}\r\n\t}\r\n\r\n\tget top() {\r\n\t\treturn this.position.y\r\n\t}\r\n\r\n\tset top(value) {\r\n\t\tif (value >= this.bottom) {\r\n\t\t\tthis.size.y = 0\r\n\t\t} else {\r\n\t\t\tthis.size.y = this.bottom - value\r\n\t\t}\r\n\r\n\t\tthis.position.y = value\r\n\t}\r\n\r\n\tget bottom() {\r\n\t\treturn this.position.y + this.size.y\r\n\t}\r\n\r\n\tset bottom(value) {\r\n\t\tif (value <= this.position.y) {\r\n\t\t\tthis.size.y = 0\r\n\t\t} else {\r\n\t\t\tthis.size.y = value - this.position.y\r\n\t\t}\r\n\t}\r\n\r\n\tget center() {\r\n\t\treturn new Vector2(this.position.x + this.size.x / 2, this.position.y + this.size.y / 2)\r\n\t}\r\n\r\n\tset center({ x, y }) {\r\n\t\tthis.x = x - this.size.x / 2\r\n\t\tthis.y = y - this.size.y / 2\r\n\t}\r\n\r\n\tset(x, y, width, height) {\r\n\t\tthis.position.set(x, y)\r\n\t\tthis.size.set(width, height)\r\n\t}\r\n\r\n\tcontains(point) {\r\n\t\treturn (\r\n\t\t\tpoint.x >= this.left &&\r\n\t\t\tpoint.x <= this.right &&\r\n\t\t\tpoint.y >= this.top &&\r\n\t\t\tpoint.y <= this.bottom\r\n\t\t)\r\n\t}\r\n\r\n\tintersectsCircle(circle) {\r\n\t\treturn !(\r\n\t\t\tcircle.position.x + circle.radius <= this.left &&\r\n\t\t\tcircle.position.x + circle.radius >= this.right &&\r\n\t\t\tcircle.position.y + circle.radius <= this.top &&\r\n\t\t\tcircle.position.y + circle.radius >= this.bottom\r\n\t\t)\r\n\t}\r\n\r\n\tintersectsRectangle(rectangle) {\r\n\t\tif (Math.abs(this.position.x - rectangle.position.x) > this.size.x / 2 + rectangle.size.x / 2)\r\n\t\t\treturn false;\r\n\t\tif (Math.abs(this.position.y - rectangle.position.y) > this.size.y / 2 + rectangle.size.y / 2)\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n}", "import Circle from './Circle.js'\r\nimport Line from './Line.js'\r\nimport { Particle } from './Particle.js'\r\nimport Rectangle from './Rectangle.js'\r\nimport Vector2 from './Vector2.js'\r\n\r\nexport default class Renderer {\r\n  constructor(\r\n    ctx,\r\n    backgroundColor = '#000',\r\n    viewportSize = new Vector2(300, 150),\r\n    dpiMultiplier = 1\r\n  ) {\r\n    this.objectToRender = []\r\n\r\n    this.deltas = []\r\n\r\n    this.gradient = null\r\n\r\n    this._dpiMultiplier = dpiMultiplier\r\n\r\n    this._ctx = ctx\r\n\r\n    this._debug = false\r\n\r\n    this._viewportSize = viewportSize\r\n\r\n    this.transparentBackground = true\r\n\r\n    this._backgroundColor = backgroundColor\r\n  }\r\n\r\n  set viewportSize(value) {\r\n    this._viewportSize = value\r\n  }\r\n\r\n  render() {\r\n    this.drawBackground(this._ctx, this._viewportSize, this.transparentBackground, this.gradient, this._dpiMultiplier)\r\n\r\n    const particles = this.objectToRender.filter((obj) => obj instanceof Particle)\r\n    const lines = this.objectToRender.filter((obj) => obj instanceof Line)\r\n    const rectangles = this.objectToRender.filter((obj) => obj instanceof Rectangle)\r\n    const circles = this.objectToRender.filter((obj) => obj instanceof Circle)\r\n\r\n    this.drawParticles(this._ctx, particles, this._dpiMultiplier)\r\n    this.drawLines(this._ctx, lines, this._dpiMultiplier)\r\n    this.drawRectangles(this._ctx, rectangles, this._dpiMultiplier)\r\n    this.drawCircles(this._ctx, circles, this._dpiMultiplier)\r\n\r\n    if (this._debug) {\r\n      this.drawPerformanceGraphic(this._ctx, this.deltas, this._dpiMultiplier)\r\n    }\r\n  }\r\n\r\n  drawBackground(ctx, viewportSize, transparentBackground, gradient, dpiMultiplier) {\r\n    if (transparentBackground) {\r\n      ctx.clearRect(\r\n        0,\r\n        0,\r\n        viewportSize.x * dpiMultiplier,\r\n        viewportSize.y * dpiMultiplier\r\n      )\r\n    } else if (gradient) {\r\n      ctx.fillStyle = gradient\r\n      ctx.fillRect(\r\n        0,\r\n        0,\r\n        viewportSize.x * dpiMultiplier,\r\n        viewportSize.y * dpiMultiplier\r\n      )\r\n    } else {\r\n      ctx.fillStyle = this._backgroundColor\r\n      ctx.fillRect(\r\n        0,\r\n        0,\r\n        viewportSize.x * dpiMultiplier,\r\n        viewportSize.y * dpiMultiplier\r\n      )\r\n    }\r\n  }\r\n\r\n  drawParticles(ctx, particles, dpiMultiplier) {\r\n    ctx.fillStyle = `rgba(255,255,255,0.5)`\r\n    ctx.beginPath()\r\n    for (const particle of particles) {\r\n      ctx.moveTo(\r\n        particle.position.x * dpiMultiplier,\r\n        particle.position.y * dpiMultiplier\r\n      )\r\n      ctx.arc(\r\n        particle.position.x * dpiMultiplier,\r\n        particle.position.y * dpiMultiplier,\r\n        particle.radius * dpiMultiplier,\r\n        0,\r\n        Math.PI * 2\r\n      )\r\n    }\r\n    ctx.fill()\r\n  }\r\n\r\n  drawLines(ctx, lines, dpiMultiplier) {\r\n    ctx.lineWidth = 1 * dpiMultiplier\r\n    for (const line of lines) {\r\n      ctx.strokeStyle = `rgba(255,255,255,${line.alpha})`\r\n      ctx.beginPath()\r\n      ctx.moveTo(\r\n        line.a.x * dpiMultiplier,\r\n        line.a.y * dpiMultiplier\r\n      )\r\n      ctx.lineTo(\r\n        line.b.x * dpiMultiplier,\r\n        line.b.y * dpiMultiplier\r\n      )\r\n      ctx.stroke()\r\n    }\r\n  }\r\n\r\n  drawRectangles(ctx, rectangles) {\r\n    ctx.lineWidth = 0.2\r\n    ctx.strokeStyle = `rgba(255,255,255,1)`\r\n    ctx.beginPath()\r\n    for (const rectangle of rectangles) {\r\n      ctx.rect(rectangle.position.x, rectangle.position.y, rectangle.size.x, rectangle.size.y)\r\n    }\r\n    ctx.stroke()\r\n  }\r\n\r\n  drawCircles(ctx, circles, dpiMultiplier) {\r\n    ctx.lineWidth = 0.2\r\n    ctx.strokeStyle = `rgba(255,255,255,0.5)`\r\n    ctx.beginPath()\r\n    for (const circle of circles) {\r\n      ctx.moveTo(\r\n        circle.position.x + circle.radius * dpiMultiplier,\r\n        circle.position.y * dpiMultiplier\r\n      )\r\n      ctx.arc(\r\n        circle.position.x * dpiMultiplier,\r\n        circle.position.y * dpiMultiplier,\r\n        circle.radius * dpiMultiplier,\r\n        0,\r\n        Math.PI * 2\r\n      )\r\n    }\r\n    ctx.stroke()\r\n  }\r\n\r\n  drawPerformanceGraphic(ctx, deltas, dpiMultiplier) {\r\n    const normalize = (val, min, max) => (val - min) / (max - min)\r\n\r\n    const raw = deltas.filter((a) => Boolean(a))\r\n    const min = Math.min(...raw)\r\n    const max = Math.max(...raw)\r\n\r\n    ctx.lineWidth = 1\r\n    ctx.font = `${16 * dpiMultiplier}px monospace`\r\n    ctx.strokeStyle = `#fff`\r\n    ctx.fillStyle = `#fff`\r\n\r\n    let offsetX = 0\r\n    const startY = 70\r\n\r\n    ctx.beginPath()\r\n    ctx.moveTo(\r\n      offsetX * dpiMultiplier,\r\n      (startY - deltas[0]) * dpiMultiplier\r\n    )\r\n    for (const delta of deltas) {\r\n      const offsetY = startY - 50 * normalize(delta, min, max)\r\n      ctx.lineTo(\r\n        offsetX * dpiMultiplier,\r\n        offsetY * dpiMultiplier\r\n      )\r\n      offsetX += 1\r\n    }\r\n\r\n    ctx.moveTo(0, startY * dpiMultiplier)\r\n    ctx.lineTo(\r\n      deltas.length * dpiMultiplier,\r\n      startY * dpiMultiplier\r\n    )\r\n    ctx.fillText(\r\n      min,\r\n      deltas.length * dpiMultiplier,\r\n      (startY + 4) * dpiMultiplier\r\n    )\r\n\r\n    ctx.moveTo(0, (startY - 50) * dpiMultiplier)\r\n    ctx.lineTo(\r\n      deltas.length * dpiMultiplier,\r\n      (startY - 50) * dpiMultiplier\r\n    )\r\n    ctx.fillText(\r\n      max,\r\n      deltas.length * dpiMultiplier,\r\n      (startY - 50 + 4) * dpiMultiplier\r\n    )\r\n\r\n    ctx.closePath()\r\n    ctx.stroke()\r\n\r\n    ctx.fillText(\r\n      `${this.objectToRender.length.toString()} objects`,\r\n      0,\r\n      15 * dpiMultiplier\r\n    )\r\n    ctx.fillText(\r\n      `${deltas[deltas.length - 1]?.toString()} ms`,\r\n      130 * dpiMultiplier,\r\n      15 * dpiMultiplier\r\n    )\r\n  }\r\n}\r\n", "import Rectangle from \"./Rectangle.js\"\r\n\r\nexport default class QuadTree {\r\n  constructor(rectangle, capacity) {\r\n    this.rectangle = rectangle\r\n\r\n    this.capacity = capacity\r\n\r\n    this.points = []\r\n\r\n    this.divided = false\r\n\r\n    this.northEast\r\n\r\n    this.northWest\r\n\r\n    this.southEast\r\n\r\n    this.southWest\r\n  }\r\n\r\n  subdivide() {\r\n    const x = this.rectangle.position.x\r\n    const y = this.rectangle.position.y\r\n    const w = this.rectangle.size.x\r\n    const h = this.rectangle.size.y\r\n    const capacity = this.capacity\r\n\r\n    this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity)\r\n    this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity)\r\n    this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity)\r\n    this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity)\r\n    this.divided = true\r\n  }\r\n\r\n  insert(point) {\r\n    if (!this.rectangle.contains(point.position)) {\r\n      return false\r\n    }\r\n\r\n    if (this.points.length < this.capacity) {\r\n      this.points.push(point)\r\n\r\n      return true\r\n    }\r\n\r\n    if (!this.divided) {\r\n      this.subdivide()\r\n    }\r\n\r\n    return (\r\n      (this.northEast.insert(point) ||\r\n        this.northWest.insert(point) ||\r\n        this.southEast.insert(point) ||\r\n        this.southWest.insert(point)) ??\r\n      false\r\n    )\r\n  }\r\n\r\n  queryCircle(circle) {\r\n    const result = []\r\n    const unseenQuadTree = []\r\n\r\n    unseenQuadTree.push(this)\r\n\r\n    for (let i = 0; i < unseenQuadTree.length; i++) {\r\n      const quadTree = unseenQuadTree[i]\r\n\r\n      if (quadTree.rectangle.intersectsCircle(circle)) {\r\n        for (const p of quadTree.points) {\r\n          if (circle.intersectsPoint(p.position)) {\r\n            result.push(p)\r\n          }\r\n        }\r\n\r\n        if (quadTree.divided) {\r\n          unseenQuadTree.push(quadTree.northEast)\r\n          unseenQuadTree.push(quadTree.northWest)\r\n          unseenQuadTree.push(quadTree.southEast)\r\n          unseenQuadTree.push(quadTree.southWest)\r\n        }\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  getAllRectangles() {\r\n    const unseenQuadTree = []\r\n\r\n    unseenQuadTree.push(this)\r\n\r\n    for (let i = 0; i < unseenQuadTree.length; i++) {\r\n      const quadTree = unseenQuadTree[i]\r\n\r\n      if (quadTree.divided) {\r\n        unseenQuadTree.push(quadTree.northEast)\r\n        unseenQuadTree.push(quadTree.northWest)\r\n        unseenQuadTree.push(quadTree.southEast)\r\n        unseenQuadTree.push(quadTree.southWest)\r\n      }\r\n    }\r\n\r\n    return unseenQuadTree.map((quadTree) => quadTree.rectangle)\r\n  }\r\n}", "export default class Random {\r\n  /** [a, b) */\r\n  static intBetween(a, b) {\r\n    if (!b) {\r\n      b = a\r\n      a = 0\r\n    }\r\n    return Math.floor(Math.random() * (b - a) + a)\r\n  }\r\n  /** [a, b) */\r\n  static floatBetween(a, b) {\r\n    if (!b) {\r\n      b = a\r\n      a = 0\r\n    }\r\n    return Math.random() * (b - a) + a\r\n  }\r\n\r\n  static fromArray(array) {\r\n    return array[Math.floor(Math.random() * array.length)]\r\n  }\r\n\r\n  static indexFromArray(array) {\r\n    return Math.floor(Math.random() * array.length)\r\n  }\r\n}\r\n", "import Rectangle from \"./Rectangle.js\"\r\nimport Vector2 from \"./Vector2.js\"\r\n\r\nexport default class Grid {\r\n  constructor(size = new Vector2(1, 1), boundRectangle = new Rectangle(0, 0, 100, 100)) {\r\n    this.rectangles = []\r\n\r\n    this.boundRectangles = []\r\n\r\n    this.size = size\r\n\r\n    this.boundRectangle = boundRectangle\r\n\r\n    this.width = boundRectangle.size.x / size.x;\r\n    this.height = boundRectangle.size.y / size.y;\r\n\r\n    this.initReactangles(size, boundRectangle)\r\n  }\r\n\r\n  initReactangles(size) {\r\n    for (let x = 0; x < size.x; x++) {\r\n      for (let y = 0; y < size.y; y++) {\r\n        this.rectangles.push(new BoundRectangle(x * this.width, y * this.height, this.width, this.height))\r\n      }\r\n    }\r\n  }\r\n\r\n  insert(particle) {\r\n    const x = Math.floor(particle.position.x / this.width)\r\n    const y = Math.floor(particle.position.y / this.height)\r\n\r\n    const rectIndex = x * y\r\n    const foundRect = this.rectangles[rectIndex]\r\n\r\n    if (foundRect) {\r\n      foundRect.particles.push(particle)\r\n    }\r\n  }\r\n\r\n  getIntersectedRectangles(circle) {\r\n    const left = Math.floor(circle.left / this.width)\r\n    const right = Math.ceil(circle.right / this.width)\r\n    const bottom = Math.floor(circle.bottom / this.height)\r\n    const top = Math.ceil(circle.top / this.height)\r\n\r\n    const boundRectangle = new BoundRectangle(\r\n      left * this.width,\r\n      top * this.height,\r\n      (right - left) * this.width,\r\n      (bottom - top) * this.height\r\n    )\r\n\r\n    this.boundRectangles.push(boundRectangle)\r\n\r\n    for (let x = left; x < right; x++) {\r\n      for (let y = bottom; y < top; y++) {\r\n        const foundRect = this.rectangles[x * y]\r\n        if (foundRect) {\r\n          boundRectangle.particles = [...boundRectangle.particles, ...foundRect.particles]\r\n        }\r\n      }\r\n    }\r\n\r\n    return boundRectangle\r\n  }\r\n\r\n  queryCircle(circle) {\r\n    const result = []\r\n\r\n    const boundRectangle = this.getIntersectedRectangles(circle)\r\n\r\n    if (!boundRectangle) {\r\n      return result\r\n    }\r\n\r\n    for (const particle of boundRectangle.particles) {\r\n      if (circle.intersectsPoint(particle.position)) {\r\n        result.push(particle)\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  clear() {\r\n    for (const rect of this.rectangles) {\r\n      rect.particles = []\r\n    }\r\n    this.boundRectangles = []\r\n  }\r\n}\r\n\r\nexport class BoundRectangle extends Rectangle {\r\n  constructor(x, y, width, height, particles = []) {\r\n    super(x, y, width, height)\r\n\r\n    this.particles = particles\r\n  }\r\n}\r\n", "import Renderer from './Renderer.js'\r\nimport { ParticleManager } from './Particle.js'\r\nimport Vector2 from './Vector2.js'\r\nimport Rectangle from './Rectangle.js'\r\nimport Line from './Line.js'\r\nimport QuadTree from './QuadTree.js'\r\nimport Circle from './Circle.js'\r\nimport Random from './Random.js'\r\nimport Grid from './Grid.js'\r\n\r\nexport default class Particles {\r\n  constructor(canvas) {\r\n    this._canvas = canvas\r\n\r\n    this._ctx = this._canvas.getContext('2d')\r\n\r\n    this._particleManager = null\r\n\r\n    this._dpiMultiplier = null\r\n\r\n    this._renderer = null\r\n\r\n    this._boundUpdate = this._update.bind(this)\r\n\r\n    this._isRunning = false\r\n\r\n    this._ticks = 0\r\n\r\n    this._deltas = new Array(200)\r\n\r\n    this._debug = false\r\n\r\n    this._boundary = null\r\n\r\n    this._quadTree = null\r\n\r\n    this.grid = null\r\n\r\n    this._resizeTimeout = null\r\n\r\n    /** 'default' | 'quadTree' | 'grid' */\r\n    this.method = 'grid'\r\n  }\r\n\r\n  init(settings) {\r\n    this._settings = settings\r\n\r\n    this._particleManager = new ParticleManager()\r\n\r\n    for (let a = 0; a < settings.particles.amount; a++) {\r\n      const particle = this._particleManager.createParticle()\r\n\r\n      particle.position.set(\r\n        Random.intBetween(\r\n          -settings.particles.distanceToLink,\r\n          settings.renderer.width + settings.particles.distanceToLink\r\n        ),\r\n        Random.intBetween(\r\n          -settings.particles.distanceToLink,\r\n          settings.renderer.height + settings.particles.distanceToLink\r\n        )\r\n      )\r\n\r\n      const velocity = new Vector2()\r\n      const alpha = 3\r\n      const beta = 4\r\n      switch (settings.particles.moveDirection) {\r\n        case 'top':\r\n          velocity.set(\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity / alpha,\r\n              settings.particles.maxVelocity / alpha\r\n            ),\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity,\r\n              -settings.particles.maxVelocity / beta\r\n            )\r\n          )\r\n          break\r\n        case 'right':\r\n          velocity.set(\r\n            Random.floatBetween(\r\n              settings.particles.maxVelocity,\r\n              settings.particles.maxVelocity / beta\r\n            ),\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity / alpha,\r\n              settings.particles.maxVelocity / alpha\r\n            )\r\n          )\r\n          break\r\n        case 'bottom':\r\n          velocity.set(\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity / alpha,\r\n              settings.particles.maxVelocity / alpha\r\n            ),\r\n            Random.floatBetween(\r\n              settings.particles.maxVelocity,\r\n              settings.particles.maxVelocity / beta\r\n            )\r\n          )\r\n          break\r\n        case 'left':\r\n          velocity.set(\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity,\r\n              -settings.particles.maxVelocity / beta\r\n            ),\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity / alpha,\r\n              settings.particles.maxVelocity / alpha\r\n            )\r\n          )\r\n          break\r\n        default:\r\n        case 'random':\r\n          velocity.set(\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity,\r\n              settings.particles.maxVelocity\r\n            ),\r\n            Random.floatBetween(\r\n              -settings.particles.maxVelocity,\r\n              settings.particles.maxVelocity\r\n            )\r\n          )\r\n          break\r\n      }\r\n      particle.velocity = velocity\r\n\r\n      particle.radius = Random.floatBetween(1, settings.particles.maxRadius)\r\n    }\r\n\r\n    if (settings.staticParticles) {\r\n      for (const coords of settings.staticParticles) {\r\n        const p = this._particleManager.createParticle()\r\n        p.active = false\r\n        p.radius = 0\r\n        p.position.set(\r\n          settings.renderer.width * coords[0],\r\n          settings.renderer.height * coords[1]\r\n        )\r\n      }\r\n    }\r\n\r\n    if (settings.renderer.dpiMultiplier) {\r\n      this._dpiMultiplier = settings.renderer.dpiMultiplier\r\n    } else {\r\n      this._dpiMultiplier = 1\r\n    }\r\n\r\n    this._renderer = new Renderer(\r\n      this._ctx,\r\n      settings.renderer.backgroundColor,\r\n      new Vector2(),\r\n      this._dpiMultiplier\r\n    )\r\n\r\n    this._renderer.transparentBackground =\r\n      settings.renderer.transparentBackground\r\n\r\n    this._setSize(settings.renderer.width, settings.renderer.height)\r\n\r\n    if (settings.renderer.linearGradient) {\r\n      const gradient = this._ctx.createLinearGradient(\r\n        settings.renderer.width *\r\n        settings.renderer.linearGradient.x1 *\r\n        this._dpiMultiplier,\r\n        settings.renderer.height *\r\n        settings.renderer.linearGradient.y1 *\r\n        this._dpiMultiplier,\r\n        settings.renderer.width *\r\n        settings.renderer.linearGradient.x2 *\r\n        this._dpiMultiplier,\r\n        settings.renderer.height *\r\n        settings.renderer.linearGradient.y2 *\r\n        this._dpiMultiplier\r\n      )\r\n      gradient.addColorStop(0, settings.renderer.linearGradient.color1)\r\n      gradient.addColorStop(1, settings.renderer.linearGradient.color2)\r\n      this._renderer.gradient = gradient\r\n    }\r\n\r\n    this.debug = settings.debug\r\n\r\n    if (settings.resize) {\r\n      window.addEventListener('resize', this._onResize.bind(this))\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  _onResize() {\r\n    if (this._resizeTimeout) {\r\n      clearTimeout(this._resizeTimeout)\r\n    }\r\n    this._resizeTimeout = setTimeout(\r\n      () => this._setSize(window.innerWidth, window.innerHeight),\r\n      100\r\n    )\r\n  }\r\n\r\n  start() {\r\n    this._isRunning = true\r\n    window.requestAnimationFrame(this._boundUpdate)\r\n\r\n    console.info('Spark Partilces started!')\r\n    return this\r\n  }\r\n\r\n  stop() {\r\n    this._isRunning = false\r\n    return this\r\n  }\r\n\r\n  _update() {\r\n    const startTime = Date.now()\r\n\r\n    if (this.method === 'quadTree') {\r\n      this._quadTree = new QuadTree(this._boundary, 4)\r\n    }\r\n    if (this.method === 'grid') {\r\n      this.grid.clear()\r\n    }\r\n\r\n    const activeParticles = this._particleManager.particles.filter((p) => p.active)\r\n\r\n    for (const particle of activeParticles) {\r\n      particle.update()\r\n\r\n      this._checkBoundary(particle, this._boundary)\r\n\r\n      if (this.method === 'quadTree') {\r\n        this._quadTree.insert(particle)\r\n      }\r\n\r\n      if (this.method === 'grid') {\r\n        this.grid.insert(particle)\r\n      }\r\n    }\r\n\r\n    let lines = []\r\n    if (this._settings.particles.linkedParticles) {\r\n      lines = this._linkPartiles(\r\n        this._particleManager.particles,\r\n        this._settings.particles.distanceToLink\r\n      )\r\n    }\r\n\r\n    const objectToRender = [...this._particleManager.particles, ...lines]\r\n    this._renderer.objectToRender = objectToRender\r\n    this._renderer.deltas = this._deltas\r\n    this._renderer.render()\r\n\r\n    if (this._isRunning) {\r\n      window.requestAnimationFrame(this._boundUpdate)\r\n    }\r\n\r\n    this._ticks++\r\n\r\n    const endTime = Date.now()\r\n    const delta = endTime - startTime\r\n    this._deltas.push(delta)\r\n    if (this._deltas.length > this._deltas.length - 1) {\r\n      this._deltas.shift()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  _linkPartiles(particles, distanceToLink) {\r\n    const lines = []\r\n\r\n    if (this.method === 'default') {\r\n      for (let a = 0; a < particles.length - 1; a++) {\r\n        for (let b = a + 1; b < particles.length; b++) {\r\n          const distance = particles[a].position.distance(particles[b].position)\r\n          if (distance < distanceToLink) {\r\n            const line = new Line(\r\n              Vector2.fromVector(particles[a].position),\r\n              Vector2.fromVector(particles[b].position)\r\n            )\r\n            const alpha = 1 - distance / distanceToLink\r\n            line.alpha = alpha\r\n            lines.push(line)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.method === 'quadTree') {\r\n      const seenParticles = []\r\n      for (const particleA of particles) {\r\n        const boundCircle = new Circle(particleA.position.x, particleA.position.y, distanceToLink)\r\n\r\n        const inBoundParticles = this._quadTree.queryCircle(boundCircle)\r\n\r\n        seenParticles.push(particleA)\r\n\r\n        for (const particleB of inBoundParticles) {\r\n          if (seenParticles.find((value) => value === particleB)) {\r\n            continue\r\n          }\r\n\r\n          const distance = particleA.position.distance(particleB.position)\r\n          const line = new Line(\r\n            Vector2.fromVector(particleA.position),\r\n            Vector2.fromVector(particleB.position)\r\n          )\r\n          const alpha = 1 - distance / distanceToLink\r\n          line.alpha = alpha\r\n          lines.push(line)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.method === 'grid') {\r\n      const seenParticles = []\r\n      for (const particleA of particles) {\r\n        const boundCircle = new Circle(particleA.position.x, particleA.position.y, distanceToLink)\r\n\r\n        const inBoundParticles = this.grid.queryCircle(boundCircle)\r\n\r\n        seenParticles.push(particleA)\r\n\r\n        for (const particleB of inBoundParticles) {\r\n          if (seenParticles.find((value) => value === particleB)) {\r\n            continue\r\n          }\r\n\r\n          const distance = particleA.position.distance(particleB.position)\r\n          const line = new Line(\r\n            Vector2.fromVector(particleA.position),\r\n            Vector2.fromVector(particleB.position)\r\n          )\r\n          const alpha = 1 - distance / distanceToLink\r\n          line.alpha = alpha\r\n          lines.push(line)\r\n        }\r\n      }\r\n    }\r\n\r\n    return lines\r\n  }\r\n\r\n  oneFrame = this._update\r\n\r\n  _setSize(width, height) {\r\n    this._canvas.style.width = width.toString() + 'px'\r\n    this._canvas.style.height = height.toString() + 'px'\r\n\r\n    this._canvas.width = width * this._dpiMultiplier\r\n    this._canvas.height = height * this._dpiMultiplier\r\n\r\n    this._renderer.viewportSize = new Vector2(width, height)\r\n\r\n    this._boundary = new Rectangle(\r\n      -this._settings.particles.distanceToLink,\r\n      -this._settings.particles.distanceToLink,\r\n      width + this._settings.particles.distanceToLink * 2,\r\n      height + this._settings.particles.distanceToLink * 2\r\n    )\r\n    this._quadTree = new QuadTree(this._boundary, 4)\r\n\r\n    const gridX = Math.floor(this._boundary.size.x / this._settings.particles.distanceToLink / 2.5)\r\n    const gridY = Math.floor(this._boundary.size.y / this._settings.particles.distanceToLink / 2.5)\r\n    this.grid = new Grid(new Vector2(gridX, gridY), this._boundary)\r\n\r\n    return this\r\n  }\r\n\r\n  get debug() {\r\n    return this._debug\r\n  }\r\n\r\n  set debug(v) {\r\n    this._debug = v\r\n    this._renderer._debug = v\r\n  }\r\n\r\n  _checkBoundary(particle, boundary) {\r\n    if (particle.position.x < boundary.left) {\r\n      particle.position.x = boundary.right\r\n      return\r\n    }\r\n\r\n    if (particle.position.x > boundary.right) {\r\n      particle.position.x = boundary.left\r\n      return\r\n    }\r\n\r\n    if (particle.position.y < boundary.top) {\r\n      particle.position.y = boundary.bottom\r\n      return\r\n    }\r\n\r\n    if (particle.position.y > boundary.bottom) {\r\n      particle.position.y = boundary.top\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "wKAAA,WAA6B,CAC3B,YAAY,EAAI,EAAG,EAAI,EAAG,CACxB,KAAK,EAAI,EACT,KAAK,EAAI,QAGJ,YAAW,EAAQ,CACxB,MAAO,IAAI,GAAQ,EAAO,EAAG,EAAO,SAG/B,WAAU,EAAO,CACtB,MAAO,IAAI,GAAQ,EAAM,GAAI,EAAM,IAGrC,IAAI,EAAG,EAAI,EAAG,CACZ,YAAK,EAAI,EACT,KAAK,EAAI,EACF,KAGT,WAAW,EAAS,EAAS,EAAG,CAC9B,YAAK,EAAI,KAAK,IAAI,GAAW,EAC7B,KAAK,EAAI,KAAK,IAAI,GAAW,EACtB,KAGT,OAAO,EAAG,CACR,MAAO,MAAK,IAAM,EAAE,GAAK,KAAK,IAAM,EAAE,EAGxC,OAAQ,CACN,GAAI,GAAQ,KAAK,MAAM,KAAK,EAAG,KAAK,GACpC,MAAI,GAAQ,GACV,IAAS,EAAI,KAAK,IAEb,EAGT,SAAS,EAAO,CACd,MAAO,MAAK,WAAW,EAAO,KAAK,UAGrC,IAAI,EAAK,CACP,YAAK,GAAK,EAAI,EACd,KAAK,GAAK,EAAI,EACP,KAGT,SAAS,EAAK,CACZ,YAAK,GAAK,EAAI,EACd,KAAK,GAAK,EAAI,EACP,KAGT,SAAS,EAAK,CACZ,YAAK,GAAK,EAAI,EACd,KAAK,GAAK,EAAI,EACP,KAGT,OAAO,EAAK,CACV,YAAK,GAAK,EAAI,EACd,KAAK,GAAK,EAAI,EACP,KAGT,MAAM,EAAO,CACX,MAAI,UAAS,GACX,MAAK,GAAK,EACV,KAAK,GAAK,GAEV,MAAK,EAAI,EACT,KAAK,EAAI,GAEJ,KAGT,QAAS,CACP,YAAK,EAAI,CAAC,KAAK,EACf,KAAK,EAAI,CAAC,KAAK,EACR,KAGT,SAAS,EAAK,CACZ,GAAM,GAAK,EAAI,EAAI,KAAK,EAClB,EAAK,EAAI,EAAI,KAAK,EAExB,MAAO,MAAK,KAAK,EAAK,EAAK,EAAK,GAGlC,WAAW,EAAK,CACd,GAAM,GAAK,EAAI,EAAI,KAAK,EAClB,EAAK,EAAI,EAAI,KAAK,EAExB,MAAO,GAAK,EAAK,EAAK,EAGxB,QAAS,CACP,GAAM,GAAI,KAAK,EACT,EAAI,KAAK,EAEf,MAAO,MAAK,KAAK,EAAI,EAAI,EAAI,GAG/B,UAAU,EAAQ,CAChB,MAAO,MAAK,YAAY,MAAM,GAGhC,UAAW,CACT,GAAM,GAAI,KAAK,EACT,EAAI,KAAK,EAEf,MAAO,GAAI,EAAI,EAAI,EAGrB,WAAY,CACV,GAAM,GAAI,KAAK,EACT,EAAI,KAAK,EACX,EAAM,EAAI,EAAI,EAAI,EAEtB,MAAI,GAAM,GACR,GAAM,EAAI,KAAK,KAAK,GAEpB,KAAK,EAAI,EAAI,EACb,KAAK,EAAI,EAAI,GAGR,KAGT,oBAAqB,CACnB,GAAM,GAAI,KAAK,EAEf,YAAK,EAAI,KAAK,EAAI,GAClB,KAAK,EAAI,EAEF,KAGT,mBAAoB,CAClB,GAAM,GAAI,KAAK,EAEf,YAAK,EAAI,KAAK,EACd,KAAK,EAAI,EAAI,GAEN,KAGT,IAAI,EAAK,CACP,MAAO,MAAK,EAAI,EAAI,EAAI,KAAK,EAAI,EAAI,EAGvC,MAAM,EAAK,CACT,MAAO,MAAK,EAAI,EAAI,EAAI,KAAK,EAAI,EAAI,EAOvC,KAAK,EAAK,EAAI,EAAG,CACf,GAAM,GAAK,KAAK,EACV,EAAK,KAAK,EAEhB,YAAK,EAAI,EAAK,EAAK,GAAI,EAAI,GAC3B,KAAK,EAAI,EAAK,EAAK,GAAI,EAAI,GAEpB,KAGT,OAAQ,CACN,YAAK,EAAI,EACT,KAAK,EAAI,EAEF,KAGT,MAAM,EAAK,CACT,GAAM,GAAM,KAAK,SAEjB,MAAI,IAAO,EAAM,GACf,KAAK,MAAM,EAAM,GAGZ,KAGT,QAAQ,EAAQ,CACd,SAAS,EAAQ,WAAW,GAAQ,YAE7B,KAAK,SAAS,EAAO,MAAM,EAAI,KAAK,IAAI,KAGjD,OAAO,EAAM,CACX,MAAO,MAAK,QAAQ,GAAM,SAM5B,OAAO,EAAO,CACZ,GAAM,GAAM,KAAK,IAAI,GACf,EAAM,KAAK,IAAI,GAErB,MAAO,MAAK,IAAI,EAAM,KAAK,EAAI,EAAM,KAAK,EAAG,EAAM,KAAK,EAAI,EAAM,KAAK,GAGzE,SAAU,CACR,MAAO,CACL,EAAG,KAAK,KAAK,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,GAC7C,EAAG,KAAK,MAAM,KAAK,EAAG,KAAK,MAlN1B,EAAP,ECEA,WAA4B,CAC1B,YAAY,EAAI,EAAG,EAAI,EAAG,EAAS,EAAG,CACpC,KAAK,SAAW,GAAI,GAAQ,EAAG,GAE/B,KAAK,OAAS,KAGZ,SAAS,CACX,MAAO,MAAK,YAGV,QAAO,EAAO,CAChB,KAAK,SAAW,KAGd,WAAW,CACb,MAAO,MAAK,OAAS,KAGnB,UAAS,EAAO,CAClB,KAAK,OAAS,EAAQ,MAGpB,OAAO,CACT,MAAO,MAAK,SAAS,EAAI,KAAK,UAG5B,MAAK,EAAO,CACd,KAAK,SAAS,EAAI,EAAQ,KAAK,UAG7B,QAAQ,CACV,MAAO,MAAK,SAAS,EAAI,KAAK,UAG5B,OAAM,EAAO,CACf,KAAK,SAAS,EAAI,EAAQ,KAAK,UAG7B,MAAM,CACR,MAAO,MAAK,SAAS,EAAI,KAAK,UAG5B,KAAI,EAAO,CACb,KAAK,SAAS,EAAI,EAAQ,KAAK,UAG7B,SAAS,CACX,MAAO,MAAK,SAAS,EAAI,KAAK,UAG5B,QAAO,EAAO,CAChB,KAAK,SAAS,EAAI,EAAQ,KAAK,OAGjC,gBAAgB,EAAO,CACrB,MAAQ,GAAM,SAAS,KAAK,WAAa,KAAK,SAxD3C,EAAP,ECAA,WAA0B,CACzB,YAAY,EAAI,GAAI,GAAW,EAAI,GAAI,GAAW,CACjD,KAAK,EAAI,EACT,KAAK,EAAI,EAGV,QAAS,CACR,MAAO,MAAK,KAAM,MAAK,EAAE,EAAI,KAAK,EAAE,GAAM,MAAK,EAAE,EAAI,KAAK,EAAE,GAAM,MAAK,EAAE,EAAI,KAAK,EAAE,GAAM,MAAK,EAAE,EAAI,KAAK,EAAE,MAPvG,EAAP,ECAO,WAAe,CACpB,aAAc,CACZ,KAAK,SAAW,GAAI,GAEpB,KAAK,SAAW,GAAI,GAEpB,KAAK,OAAS,GAEd,KAAK,OAAS,EAGhB,QAAS,CACP,KAAK,SAAS,IAAI,KAAK,YAIpB,OAAsB,CAC3B,aAAc,CACZ,KAAK,UAAY,GAGnB,gBAAiB,CACf,GAAM,GAAc,GAAI,GACxB,YAAK,UAAU,KAAK,GACb,ICxBX,WAA+B,CAC9B,YAAY,EAAI,EAAG,EAAI,EAAG,EAAQ,EAAG,EAAS,EAAG,CAChD,KAAK,SAAW,GAAI,GAAQ,EAAG,GAE/B,KAAK,KAAO,GAAI,GAAQ,EAAO,MAG5B,OAAO,CACV,MAAO,MAAK,SAAS,KAGlB,MAAK,EAAO,CACf,AAAI,GAAS,KAAK,MACjB,KAAK,KAAK,EAAI,EAEd,KAAK,KAAK,EAAI,KAAK,MAAQ,EAG5B,KAAK,SAAS,EAAI,KAGf,QAAQ,CACX,MAAO,MAAK,SAAS,EAAI,KAAK,KAAK,KAGhC,OAAM,EAAO,CAChB,AAAI,GAAS,KAAK,SAAS,EAC1B,KAAK,KAAK,EAAI,EAEd,KAAK,KAAK,EAAI,EAAQ,KAAK,SAAS,KAIlC,MAAM,CACT,MAAO,MAAK,SAAS,KAGlB,KAAI,EAAO,CACd,AAAI,GAAS,KAAK,OACjB,KAAK,KAAK,EAAI,EAEd,KAAK,KAAK,EAAI,KAAK,OAAS,EAG7B,KAAK,SAAS,EAAI,KAGf,SAAS,CACZ,MAAO,MAAK,SAAS,EAAI,KAAK,KAAK,KAGhC,QAAO,EAAO,CACjB,AAAI,GAAS,KAAK,SAAS,EAC1B,KAAK,KAAK,EAAI,EAEd,KAAK,KAAK,EAAI,EAAQ,KAAK,SAAS,KAIlC,SAAS,CACZ,MAAO,IAAI,GAAQ,KAAK,SAAS,EAAI,KAAK,KAAK,EAAI,EAAG,KAAK,SAAS,EAAI,KAAK,KAAK,EAAI,MAGnF,QAAO,CAAE,IAAG,KAAK,CACpB,KAAK,EAAI,EAAI,KAAK,KAAK,EAAI,EAC3B,KAAK,EAAI,EAAI,KAAK,KAAK,EAAI,EAG5B,IAAI,EAAG,EAAG,EAAO,EAAQ,CACxB,KAAK,SAAS,IAAI,EAAG,GACrB,KAAK,KAAK,IAAI,EAAO,GAGtB,SAAS,EAAO,CACf,MACC,GAAM,GAAK,KAAK,MAChB,EAAM,GAAK,KAAK,OAChB,EAAM,GAAK,KAAK,KAChB,EAAM,GAAK,KAAK,OAIlB,iBAAiB,EAAQ,CACxB,MAAO,CACN,GAAO,SAAS,EAAI,EAAO,QAAU,KAAK,MAC1C,EAAO,SAAS,EAAI,EAAO,QAAU,KAAK,OAC1C,EAAO,SAAS,EAAI,EAAO,QAAU,KAAK,KAC1C,EAAO,SAAS,EAAI,EAAO,QAAU,KAAK,QAI5C,oBAAoB,EAAW,CAG9B,MAFI,OAAK,IAAI,KAAK,SAAS,EAAI,EAAU,SAAS,GAAK,KAAK,KAAK,EAAI,EAAI,EAAU,KAAK,EAAI,GAExF,KAAK,IAAI,KAAK,SAAS,EAAI,EAAU,SAAS,GAAK,KAAK,KAAK,EAAI,EAAI,EAAU,KAAK,EAAI,KA9FvF,EAAP,ECIA,WAA8B,CAC5B,YACE,EACA,EAAkB,OAClB,EAAe,GAAI,GAAQ,IAAK,KAChC,EAAgB,EAChB,CACA,KAAK,eAAiB,GAEtB,KAAK,OAAS,GAEd,KAAK,SAAW,KAEhB,KAAK,eAAiB,EAEtB,KAAK,KAAO,EAEZ,KAAK,OAAS,GAEd,KAAK,cAAgB,EAErB,KAAK,sBAAwB,GAE7B,KAAK,iBAAmB,KAGtB,cAAa,EAAO,CACtB,KAAK,cAAgB,EAGvB,QAAS,CACP,KAAK,eAAe,KAAK,KAAM,KAAK,cAAe,KAAK,sBAAuB,KAAK,SAAU,KAAK,gBAEnG,GAAM,GAAY,KAAK,eAAe,OAAO,AAAC,GAAQ,YAAe,IAC/D,EAAQ,KAAK,eAAe,OAAO,AAAC,GAAQ,YAAe,IAC3D,EAAa,KAAK,eAAe,OAAO,AAAC,GAAQ,YAAe,IAChE,EAAU,KAAK,eAAe,OAAO,AAAC,GAAQ,YAAe,IAEnE,KAAK,cAAc,KAAK,KAAM,EAAW,KAAK,gBAC9C,KAAK,UAAU,KAAK,KAAM,EAAO,KAAK,gBACtC,KAAK,eAAe,KAAK,KAAM,EAAY,KAAK,gBAChD,KAAK,YAAY,KAAK,KAAM,EAAS,KAAK,gBAEtC,KAAK,QACP,KAAK,uBAAuB,KAAK,KAAM,KAAK,OAAQ,KAAK,gBAI7D,eAAe,EAAK,EAAc,EAAuB,EAAU,EAAe,CAChF,AAAI,EACF,EAAI,UACF,EACA,EACA,EAAa,EAAI,EACjB,EAAa,EAAI,GAEd,AAAI,EACT,GAAI,UAAY,EAChB,EAAI,SACF,EACA,EACA,EAAa,EAAI,EACjB,EAAa,EAAI,IAGnB,GAAI,UAAY,KAAK,iBACrB,EAAI,SACF,EACA,EACA,EAAa,EAAI,EACjB,EAAa,EAAI,IAKvB,cAAc,EAAK,EAAW,EAAe,CAC3C,EAAI,UAAY,wBAChB,EAAI,YACJ,OAAW,KAAY,GACrB,EAAI,OACF,EAAS,SAAS,EAAI,EACtB,EAAS,SAAS,EAAI,GAExB,EAAI,IACF,EAAS,SAAS,EAAI,EACtB,EAAS,SAAS,EAAI,EACtB,EAAS,OAAS,EAClB,EACA,KAAK,GAAK,GAGd,EAAI,OAGN,UAAU,EAAK,EAAO,EAAe,CACnC,EAAI,UAAY,EAAI,EACpB,OAAW,KAAQ,GACjB,EAAI,YAAc,oBAAoB,EAAK,SAC3C,EAAI,YACJ,EAAI,OACF,EAAK,EAAE,EAAI,EACX,EAAK,EAAE,EAAI,GAEb,EAAI,OACF,EAAK,EAAE,EAAI,EACX,EAAK,EAAE,EAAI,GAEb,EAAI,SAIR,eAAe,EAAK,EAAY,CAC9B,EAAI,UAAY,GAChB,EAAI,YAAc,sBAClB,EAAI,YACJ,OAAW,KAAa,GACtB,EAAI,KAAK,EAAU,SAAS,EAAG,EAAU,SAAS,EAAG,EAAU,KAAK,EAAG,EAAU,KAAK,GAExF,EAAI,SAGN,YAAY,EAAK,EAAS,EAAe,CACvC,EAAI,UAAY,GAChB,EAAI,YAAc,wBAClB,EAAI,YACJ,OAAW,KAAU,GACnB,EAAI,OACF,EAAO,SAAS,EAAI,EAAO,OAAS,EACpC,EAAO,SAAS,EAAI,GAEtB,EAAI,IACF,EAAO,SAAS,EAAI,EACpB,EAAO,SAAS,EAAI,EACpB,EAAO,OAAS,EAChB,EACA,KAAK,GAAK,GAGd,EAAI,SAGN,uBAAuB,EAAK,EAAQ,EAAe,CAnJrD,MAoJI,GAAM,GAAY,CAAC,EAAK,EAAK,IAAS,GAAM,GAAQ,GAAM,GAEpD,EAAM,EAAO,OAAO,AAAC,GAAM,QAAQ,IACnC,EAAM,KAAK,IAAI,GAAG,GAClB,EAAM,KAAK,IAAI,GAAG,GAExB,EAAI,UAAY,EAChB,EAAI,KAAO,GAAG,GAAK,gBACnB,EAAI,YAAc,OAClB,EAAI,UAAY,OAEhB,GAAI,GAAU,EACR,EAAS,GAEf,EAAI,YACJ,EAAI,OACF,EAAU,EACT,GAAS,EAAO,IAAM,GAEzB,OAAW,KAAS,GAAQ,CAC1B,GAAM,GAAU,EAAS,GAAK,EAAU,EAAO,EAAK,GACpD,EAAI,OACF,EAAU,EACV,EAAU,GAEZ,GAAW,EAGb,EAAI,OAAO,EAAG,EAAS,GACvB,EAAI,OACF,EAAO,OAAS,EAChB,EAAS,GAEX,EAAI,SACF,EACA,EAAO,OAAS,EACf,GAAS,GAAK,GAGjB,EAAI,OAAO,EAAI,GAAS,IAAM,GAC9B,EAAI,OACF,EAAO,OAAS,EACf,GAAS,IAAM,GAElB,EAAI,SACF,EACA,EAAO,OAAS,EACf,GAAS,GAAK,GAAK,GAGtB,EAAI,YACJ,EAAI,SAEJ,EAAI,SACF,GAAG,KAAK,eAAe,OAAO,qBAC9B,EACA,GAAK,GAEP,EAAI,SACF,GAAG,KAAO,EAAO,OAAS,KAAvB,cAA2B,gBAC9B,IAAM,EACN,GAAK,KA3MJ,EAAP,ECJA,WAA8B,CAC5B,YAAY,EAAW,EAAU,CAC/B,KAAK,UAAY,EAEjB,KAAK,SAAW,EAEhB,KAAK,OAAS,GAEd,KAAK,QAAU,GAEf,KAAK,UAEL,KAAK,UAEL,KAAK,UAEL,KAAK,UAGP,WAAY,CACV,GAAM,GAAI,KAAK,UAAU,SAAS,EAC5B,EAAI,KAAK,UAAU,SAAS,EAC5B,EAAI,KAAK,UAAU,KAAK,EACxB,EAAI,KAAK,UAAU,KAAK,EACxB,EAAW,KAAK,SAEtB,KAAK,UAAY,GAAI,GAAS,GAAI,GAAU,EAAG,EAAG,EAAI,EAAG,EAAI,GAAI,GACjE,KAAK,UAAY,GAAI,GAAS,GAAI,GAAU,EAAI,EAAI,EAAG,EAAG,EAAI,EAAG,EAAI,GAAI,GACzE,KAAK,UAAY,GAAI,GAAS,GAAI,GAAU,EAAG,EAAI,EAAI,EAAG,EAAI,EAAG,EAAI,GAAI,GACzE,KAAK,UAAY,GAAI,GAAS,GAAI,GAAU,EAAI,EAAI,EAAG,EAAI,EAAI,EAAG,EAAI,EAAG,EAAI,GAAI,GACjF,KAAK,QAAU,GAGjB,OAAO,EAAO,CAnChB,MAoCI,MAAK,MAAK,UAAU,SAAS,EAAM,UAI/B,KAAK,OAAO,OAAS,KAAK,SAC5B,MAAK,OAAO,KAAK,GAEV,IAGJ,MAAK,SACR,KAAK,YAIJ,QAAK,UAAU,OAAO,IACrB,KAAK,UAAU,OAAO,IACtB,KAAK,UAAU,OAAO,IACtB,KAAK,UAAU,OAAO,KAHvB,OAID,IAlBO,GAsBX,YAAY,EAAQ,CAClB,GAAM,GAAS,GACT,EAAiB,GAEvB,EAAe,KAAK,MAEpB,OAAS,GAAI,EAAG,EAAI,EAAe,OAAQ,IAAK,CAC9C,GAAM,GAAW,EAAe,GAEhC,GAAI,EAAS,UAAU,iBAAiB,GAAS,CAC/C,OAAW,KAAK,GAAS,OACvB,AAAI,EAAO,gBAAgB,EAAE,WAC3B,EAAO,KAAK,GAIhB,AAAI,EAAS,SACX,GAAe,KAAK,EAAS,WAC7B,EAAe,KAAK,EAAS,WAC7B,EAAe,KAAK,EAAS,WAC7B,EAAe,KAAK,EAAS,aAKnC,MAAO,GAGT,kBAAmB,CACjB,GAAM,GAAiB,GAEvB,EAAe,KAAK,MAEpB,OAAS,GAAI,EAAG,EAAI,EAAe,OAAQ,IAAK,CAC9C,GAAM,GAAW,EAAe,GAEhC,AAAI,EAAS,SACX,GAAe,KAAK,EAAS,WAC7B,EAAe,KAAK,EAAS,WAC7B,EAAe,KAAK,EAAS,WAC7B,EAAe,KAAK,EAAS,YAIjC,MAAO,GAAe,IAAI,AAAC,GAAa,EAAS,aArG9C,EAAP,ECFA,WAA4B,OAEnB,YAAW,EAAG,EAAG,CACtB,MAAK,IACH,GAAI,EACJ,EAAI,GAEC,KAAK,MAAM,KAAK,SAAY,GAAI,GAAK,SAGvC,cAAa,EAAG,EAAG,CACxB,MAAK,IACH,GAAI,EACJ,EAAI,GAEC,KAAK,SAAY,GAAI,GAAK,QAG5B,WAAU,EAAO,CACtB,MAAO,GAAM,KAAK,MAAM,KAAK,SAAW,EAAM,eAGzC,gBAAe,EAAO,CAC3B,MAAO,MAAK,MAAM,KAAK,SAAW,EAAM,UAvBrC,EAAP,ECGA,WAA0B,CACxB,YAAY,EAAO,GAAI,GAAQ,EAAG,GAAI,EAAiB,GAAI,GAAU,EAAG,EAAG,IAAK,KAAM,CACpF,KAAK,WAAa,GAElB,KAAK,gBAAkB,GAEvB,KAAK,KAAO,EAEZ,KAAK,eAAiB,EAEtB,KAAK,MAAQ,EAAe,KAAK,EAAI,EAAK,EAC1C,KAAK,OAAS,EAAe,KAAK,EAAI,EAAK,EAE3C,KAAK,gBAAgB,EAAM,GAG7B,gBAAgB,EAAM,CACpB,OAAS,GAAI,EAAG,EAAI,EAAK,EAAG,IAC1B,OAAS,GAAI,EAAG,EAAI,EAAK,EAAG,IAC1B,KAAK,WAAW,KAAK,GAAI,GAAe,EAAI,KAAK,MAAO,EAAI,KAAK,OAAQ,KAAK,MAAO,KAAK,SAKhG,OAAO,EAAU,CACf,GAAM,GAAI,KAAK,MAAM,EAAS,SAAS,EAAI,KAAK,OAC1C,EAAI,KAAK,MAAM,EAAS,SAAS,EAAI,KAAK,QAE1C,EAAY,EAAI,EAChB,EAAY,KAAK,WAAW,GAElC,AAAI,GACF,EAAU,UAAU,KAAK,GAI7B,yBAAyB,EAAQ,CAC/B,GAAM,GAAO,KAAK,MAAM,EAAO,KAAO,KAAK,OACrC,EAAQ,KAAK,KAAK,EAAO,MAAQ,KAAK,OACtC,EAAS,KAAK,MAAM,EAAO,OAAS,KAAK,QACzC,EAAM,KAAK,KAAK,EAAO,IAAM,KAAK,QAElC,EAAiB,GAAI,GACzB,EAAO,KAAK,MACZ,EAAM,KAAK,OACV,GAAQ,GAAQ,KAAK,MACrB,GAAS,GAAO,KAAK,QAGxB,KAAK,gBAAgB,KAAK,GAE1B,OAAS,GAAI,EAAM,EAAI,EAAO,IAC5B,OAAS,GAAI,EAAQ,EAAI,EAAK,IAAK,CACjC,GAAM,GAAY,KAAK,WAAW,EAAI,GACtC,AAAI,GACF,GAAe,UAAY,CAAC,GAAG,EAAe,UAAW,GAAG,EAAU,YAK5E,MAAO,GAGT,YAAY,EAAQ,CAClB,GAAM,GAAS,GAET,EAAiB,KAAK,yBAAyB,GAErD,GAAI,CAAC,EACH,MAAO,GAGT,OAAW,KAAY,GAAe,UACpC,AAAI,EAAO,gBAAgB,EAAS,WAClC,EAAO,KAAK,GAIhB,MAAO,GAGT,OAAQ,CACN,OAAW,KAAQ,MAAK,WACtB,EAAK,UAAY,GAEnB,KAAK,gBAAkB,KArFpB,EAAP,EAyFO,eAA6B,EAAU,CAC5C,YAAY,EAAG,EAAG,EAAO,EAAQ,EAAY,GAAI,CAC/C,MAAM,EAAG,EAAG,EAAO,GAEnB,KAAK,UAAY,ICtFrB,WAA+B,CAC7B,YAAY,EAAQ,CA+UpB,kBAAW,KAAK,SA9Ud,KAAK,QAAU,EAEf,KAAK,KAAO,KAAK,QAAQ,WAAW,MAEpC,KAAK,iBAAmB,KAExB,KAAK,eAAiB,KAEtB,KAAK,UAAY,KAEjB,KAAK,aAAe,KAAK,QAAQ,KAAK,MAEtC,KAAK,WAAa,GAElB,KAAK,OAAS,EAEd,KAAK,QAAU,GAAI,OAAM,KAEzB,KAAK,OAAS,GAEd,KAAK,UAAY,KAEjB,KAAK,UAAY,KAEjB,KAAK,KAAO,KAEZ,KAAK,eAAiB,KAGtB,KAAK,OAAS,OAGhB,KAAK,EAAU,CACb,KAAK,UAAY,EAEjB,KAAK,iBAAmB,GAAI,GAE5B,OAAS,GAAI,EAAG,EAAI,EAAS,UAAU,OAAQ,IAAK,CAClD,GAAM,GAAW,KAAK,iBAAiB,iBAEvC,EAAS,SAAS,IAChB,EAAO,WACL,CAAC,EAAS,UAAU,eACpB,EAAS,SAAS,MAAQ,EAAS,UAAU,gBAE/C,EAAO,WACL,CAAC,EAAS,UAAU,eACpB,EAAS,SAAS,OAAS,EAAS,UAAU,iBAIlD,GAAM,GAAW,GAAI,GACf,EAAQ,EACR,EAAO,EACb,OAAQ,EAAS,UAAU,mBACpB,MACH,EAAS,IACP,EAAO,aACL,CAAC,EAAS,UAAU,YAAc,EAClC,EAAS,UAAU,YAAc,GAEnC,EAAO,aACL,CAAC,EAAS,UAAU,YACpB,CAAC,EAAS,UAAU,YAAc,IAGtC,UACG,QACH,EAAS,IACP,EAAO,aACL,EAAS,UAAU,YACnB,EAAS,UAAU,YAAc,GAEnC,EAAO,aACL,CAAC,EAAS,UAAU,YAAc,EAClC,EAAS,UAAU,YAAc,IAGrC,UACG,SACH,EAAS,IACP,EAAO,aACL,CAAC,EAAS,UAAU,YAAc,EAClC,EAAS,UAAU,YAAc,GAEnC,EAAO,aACL,EAAS,UAAU,YACnB,EAAS,UAAU,YAAc,IAGrC,UACG,OACH,EAAS,IACP,EAAO,aACL,CAAC,EAAS,UAAU,YACpB,CAAC,EAAS,UAAU,YAAc,GAEpC,EAAO,aACL,CAAC,EAAS,UAAU,YAAc,EAClC,EAAS,UAAU,YAAc,IAGrC,kBAEG,SACH,EAAS,IACP,EAAO,aACL,CAAC,EAAS,UAAU,YACpB,EAAS,UAAU,aAErB,EAAO,aACL,CAAC,EAAS,UAAU,YACpB,EAAS,UAAU,cAGvB,MAEJ,EAAS,SAAW,EAEpB,EAAS,OAAS,EAAO,aAAa,EAAG,EAAS,UAAU,WAG9D,GAAI,EAAS,gBACX,OAAW,KAAU,GAAS,gBAAiB,CAC7C,GAAM,GAAI,KAAK,iBAAiB,iBAChC,EAAE,OAAS,GACX,EAAE,OAAS,EACX,EAAE,SAAS,IACT,EAAS,SAAS,MAAQ,EAAO,GACjC,EAAS,SAAS,OAAS,EAAO,IAuBxC,GAlBA,AAAI,EAAS,SAAS,cACpB,KAAK,eAAiB,EAAS,SAAS,cAExC,KAAK,eAAiB,EAGxB,KAAK,UAAY,GAAI,GACnB,KAAK,KACL,EAAS,SAAS,gBAClB,GAAI,GACJ,KAAK,gBAGP,KAAK,UAAU,sBACb,EAAS,SAAS,sBAEpB,KAAK,SAAS,EAAS,SAAS,MAAO,EAAS,SAAS,QAErD,EAAS,SAAS,eAAgB,CACpC,GAAM,GAAW,KAAK,KAAK,qBACzB,EAAS,SAAS,MAClB,EAAS,SAAS,eAAe,GACjC,KAAK,eACL,EAAS,SAAS,OAClB,EAAS,SAAS,eAAe,GACjC,KAAK,eACL,EAAS,SAAS,MAClB,EAAS,SAAS,eAAe,GACjC,KAAK,eACL,EAAS,SAAS,OAClB,EAAS,SAAS,eAAe,GACjC,KAAK,gBAEP,EAAS,aAAa,EAAG,EAAS,SAAS,eAAe,QAC1D,EAAS,aAAa,EAAG,EAAS,SAAS,eAAe,QAC1D,KAAK,UAAU,SAAW,EAG5B,YAAK,MAAQ,EAAS,MAElB,EAAS,QACX,OAAO,iBAAiB,SAAU,KAAK,UAAU,KAAK,OAGjD,KAGT,WAAY,CACV,AAAI,KAAK,gBACP,aAAa,KAAK,gBAEpB,KAAK,eAAiB,WACpB,IAAM,KAAK,SAAS,OAAO,WAAY,OAAO,aAC9C,KAIJ,OAAQ,CACN,YAAK,WAAa,GAClB,OAAO,sBAAsB,KAAK,cAElC,QAAQ,KAAK,4BACN,KAGT,MAAO,CACL,YAAK,WAAa,GACX,KAGT,SAAU,CACR,GAAM,GAAY,KAAK,MAEvB,AAAI,KAAK,SAAW,YAClB,MAAK,UAAY,GAAI,GAAS,KAAK,UAAW,IAE5C,KAAK,SAAW,QAClB,KAAK,KAAK,QAGZ,GAAM,GAAkB,KAAK,iBAAiB,UAAU,OAAO,AAAC,GAAM,EAAE,QAExE,OAAW,KAAY,GACrB,EAAS,SAET,KAAK,eAAe,EAAU,KAAK,WAE/B,KAAK,SAAW,YAClB,KAAK,UAAU,OAAO,GAGpB,KAAK,SAAW,QAClB,KAAK,KAAK,OAAO,GAIrB,GAAI,GAAQ,GACZ,AAAI,KAAK,UAAU,UAAU,iBAC3B,GAAQ,KAAK,cACX,KAAK,iBAAiB,UACtB,KAAK,UAAU,UAAU,iBAI7B,GAAM,GAAiB,CAAC,GAAG,KAAK,iBAAiB,UAAW,GAAG,GAC/D,KAAK,UAAU,eAAiB,EAChC,KAAK,UAAU,OAAS,KAAK,QAC7B,KAAK,UAAU,SAEX,KAAK,YACP,OAAO,sBAAsB,KAAK,cAGpC,KAAK,SAGL,GAAM,GAAQ,AADE,KAAK,MACG,EACxB,YAAK,QAAQ,KAAK,GACd,KAAK,QAAQ,OAAS,KAAK,QAAQ,OAAS,GAC9C,KAAK,QAAQ,QAGR,KAGT,cAAc,EAAW,EAAgB,CACvC,GAAM,GAAQ,GAEd,GAAI,KAAK,SAAW,UAClB,OAAS,GAAI,EAAG,EAAI,EAAU,OAAS,EAAG,IACxC,OAAS,GAAI,EAAI,EAAG,EAAI,EAAU,OAAQ,IAAK,CAC7C,GAAM,GAAW,EAAU,GAAG,SAAS,SAAS,EAAU,GAAG,UAC7D,GAAI,EAAW,EAAgB,CAC7B,GAAM,GAAO,GAAI,GACf,EAAQ,WAAW,EAAU,GAAG,UAChC,EAAQ,WAAW,EAAU,GAAG,WAE5B,EAAQ,EAAI,EAAW,EAC7B,EAAK,MAAQ,EACb,EAAM,KAAK,IAMnB,GAAI,KAAK,SAAW,WAAY,CAC9B,GAAM,GAAgB,GACtB,OAAW,KAAa,GAAW,CACjC,GAAM,GAAc,GAAI,GAAO,EAAU,SAAS,EAAG,EAAU,SAAS,EAAG,GAErE,EAAmB,KAAK,UAAU,YAAY,GAEpD,EAAc,KAAK,GAEnB,OAAW,KAAa,GAAkB,CACxC,GAAI,EAAc,KAAK,AAAC,GAAU,IAAU,GAC1C,SAGF,GAAM,GAAW,EAAU,SAAS,SAAS,EAAU,UACjD,EAAO,GAAI,GACf,EAAQ,WAAW,EAAU,UAC7B,EAAQ,WAAW,EAAU,WAEzB,EAAQ,EAAI,EAAW,EAC7B,EAAK,MAAQ,EACb,EAAM,KAAK,KAKjB,GAAI,KAAK,SAAW,OAAQ,CAC1B,GAAM,GAAgB,GACtB,OAAW,KAAa,GAAW,CACjC,GAAM,GAAc,GAAI,GAAO,EAAU,SAAS,EAAG,EAAU,SAAS,EAAG,GAErE,EAAmB,KAAK,KAAK,YAAY,GAE/C,EAAc,KAAK,GAEnB,OAAW,KAAa,GAAkB,CACxC,GAAI,EAAc,KAAK,AAAC,GAAU,IAAU,GAC1C,SAGF,GAAM,GAAW,EAAU,SAAS,SAAS,EAAU,UACjD,EAAO,GAAI,GACf,EAAQ,WAAW,EAAU,UAC7B,EAAQ,WAAW,EAAU,WAEzB,EAAQ,EAAI,EAAW,EAC7B,EAAK,MAAQ,EACb,EAAM,KAAK,KAKjB,MAAO,GAKT,SAAS,EAAO,EAAQ,CACtB,KAAK,QAAQ,MAAM,MAAQ,EAAM,WAAa,KAC9C,KAAK,QAAQ,MAAM,OAAS,EAAO,WAAa,KAEhD,KAAK,QAAQ,MAAQ,EAAQ,KAAK,eAClC,KAAK,QAAQ,OAAS,EAAS,KAAK,eAEpC,KAAK,UAAU,aAAe,GAAI,GAAQ,EAAO,GAEjD,KAAK,UAAY,GAAI,GACnB,CAAC,KAAK,UAAU,UAAU,eAC1B,CAAC,KAAK,UAAU,UAAU,eAC1B,EAAQ,KAAK,UAAU,UAAU,eAAiB,EAClD,EAAS,KAAK,UAAU,UAAU,eAAiB,GAErD,KAAK,UAAY,GAAI,GAAS,KAAK,UAAW,GAE9C,GAAM,GAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,EAAI,KAAK,UAAU,UAAU,eAAiB,KACrF,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,EAAI,KAAK,UAAU,UAAU,eAAiB,KAC3F,YAAK,KAAO,GAAI,GAAK,GAAI,GAAQ,EAAO,GAAQ,KAAK,WAE9C,QAGL,QAAQ,CACV,MAAO,MAAK,UAGV,OAAM,EAAG,CACX,KAAK,OAAS,EACd,KAAK,UAAU,OAAS,EAG1B,eAAe,EAAU,EAAU,CACjC,GAAI,EAAS,SAAS,EAAI,EAAS,KAAM,CACvC,EAAS,SAAS,EAAI,EAAS,MAC/B,OAGF,GAAI,EAAS,SAAS,EAAI,EAAS,MAAO,CACxC,EAAS,SAAS,EAAI,EAAS,KAC/B,OAGF,GAAI,EAAS,SAAS,EAAI,EAAS,IAAK,CACtC,EAAS,SAAS,EAAI,EAAS,OAC/B,OAGF,AAAI,EAAS,SAAS,EAAI,EAAS,QACjC,GAAS,SAAS,EAAI,EAAS,OApY9B,EAAP",
  "names": []
}
